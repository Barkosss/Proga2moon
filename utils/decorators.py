from functools import wraps
from services.database import DataBase
db = DataBase()
from main import bot
from models.Request import Request, Status
from services.database import DataBase
db = DataBase()


def admin_only(event_id: int):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
    """

    def decorator(func):
        @wraps(func)
        def wrapper(message, *args, **kwargs):
            event_request: Request = db.get_event(event_id)

            if event_request.status != Status.OK:
                bot.reply_to(message, "‚ùå | –£–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                return

            event = event_request.value

            if message.from_user.id in event.admin_ids:
                return func(message, *args, **kwargs)

            bot.reply_to(message, "‚ùå | –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return

        return wrapper

    return decorator

def admin_only_event_callback(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è callback-—Ñ—É–Ω–∫—Ü–∏–π, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é event.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ –≤ callback_data –ø–µ—Ä–µ–¥–∞–Ω–æ "event_edit:<event_id>"
    """
    @wraps(func)
    def wrapper(call, *args, **kwargs):
        try:
            event_id = int(call.data.split(":")[1])
        except (IndexError, ValueError):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
            return

        user_id = call.from_user.id
        events = db.get_admin_events(user_id)
        if not any(e.id == event_id for e in events):
            bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é.")
            return

        return func(call, event_id=event_id, *args, **kwargs)
    return wrapper

def user_only(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º.
    """
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        user_request: Request = db.get_user(message.from_user.id)
        if user_request.status == Status.OK:
            return func(message, *args, **kwargs)
        else:
            bot.reply_to(message, "üîê | –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å")
            return None
    return wrapper