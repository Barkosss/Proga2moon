from enums.BotState import BotState
from enums.StatusEnum import Status
from utils.decorators import admin_only, admin_only_event_callback
from services.database import DataBase
db = DataBase()
from telebot import types
from models.Event import Event

def register_handlers(bot):
    @bot.message_handler(func=lambda msg: msg.text == "–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    @admin_only(event_id=100)
    def show_admin_events(message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è" –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.

        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞,
        –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ª–∏—Å—Ç–∞–Ω–∏—è.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            message (telebot.types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª!")

        user_id = message.from_user.id
        events = db.get_admin_events(user_id)  # ‚Üê –≤–æ—Ç —Ç—É—Ç –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è

        if not events:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
            return

        with bot.retrieve_data(user_id, message.chat_id) as data:
            data["admin_event_index"] = 0

        show_event_card(message.chat.id, user_id, events)

    def show_event_card(chat_id, user_id, events: list[Event], message_id=None):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω `message_id`, —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è. –ò–Ω–∞—á–µ ‚Äî —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤–æ–µ.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            chat_id (int): ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            events (list[Event]): –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
            message_id (Optional[int]): ID —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        """

        with bot.retrieve_data(user_id, chat_id) as data:
            index = data.get('admin_event_index', 0)
            event = events[index]

        text = (
            f"<b>{event.title}</b>\n"
            f"–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤: {len(event.workshop_ids)}\n"
            f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(event.registered_user_ids)}\n"
            f"–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {event.start.date()} ‚Äî {event.end.date()}"
        )

        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="event_prev"),
            types.InlineKeyboardButton("‚û°Ô∏è", callback_data="event_next")
        )
        markup.add(types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="event_edit"))
        markup.add(types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ", callback_data="event_create"))

        if message_id:
            bot.edit_message_text(text, chat_id, message_id, reply_markup=markup, parse_mode="HTML")
        else:
            bot.send_message(chat_id, text, reply_markup=markup, parse_mode="HTML")


        @bot.callback_query_handler(func=lambda call: call.data in ["event_prev", "event_next"])
        def paginate_events(call):
            """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ª–∏—Å—Ç–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (‚¨ÖÔ∏è, ‚û°Ô∏è).

            –ò–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É.

            –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
                call (telebot.types.CallbackQuery): –æ–±—ä–µ–∫—Ç –∫–æ–ª–±—ç–∫–∞ –æ—Ç Telegram
            """
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            events = db.get_admin_events(user_id)
            total = len(events)

            if total == 0:
                bot.answer_callback_query(call.id, "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
                return

            # –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
            with bot.retrieve_data(user_id, chat_id) as data:
                current = data.get("admin_event_index", 0)

                if call.data == "event_prev":
                    current = (current - 1) % total
                else:
                    current = (current + 1) % total

                data["admin_event_index"] = current

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            show_event_card(
                chat_id=chat_id,
                user_id=user_id,
                events=events,
                message_id=call.message.message_id
            )

            bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("event_edit:"))
    @admin_only_event_callback
    def handle_event_edit(call, event_id):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
        """
        bot.answer_callback_query(call.id)

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üïí –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data=f"event_edit_time:{event_id}"))
        markup.add(types.InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç", callback_data=f"event_edit_chat:{event_id}"))
        markup.add(types.InlineKeyboardButton("üß© –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã", callback_data=f"event_edit_workshops:{event_id}"))
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="event_edit_back"))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üîß –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ #{event_id}",
            reply_markup=markup
        )

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="event_edit_back"))

    @bot.callback_query_handler(func=lambda call: call.data.startswith("event_edit_time:"))
    @admin_only_event_callback
    def handle_edit_time(call, event_id):
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`–¥–¥.–º–º.–≥–≥–≥–≥ –¥–¥.–º–º.–≥–≥–≥–≥`",
                         parse_mode="Markdown")
        bot.set_state(call.from_user.id, BotState.AWAIT_EVENT_TIME, call.message.chat.id)

        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data["event_id"] = event_id

    @bot.message_handler(state=BotState.AWAIT_EVENT_TIME)
    def receive_event_time(message):
        from datetime import datetime
        user_id = message.from_user.id
        chat_id = message.chat.id

        try:
            start_str, end_str = message.text.strip().split()
            start = datetime.strptime(start_str, "%d.%m.%Y")
            end = datetime.strptime(end_str, "%d.%m.%Y")
        except:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        with bot.retrieve_data(user_id, chat_id) as data:
            event_id = data["event_id"]

        res = db.get_event(event_id)
        if res.status != Status.OK:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
            return

        event = Event.from_dict(res.value)
        event.start = start
        event.end = end

        db.update_event(event)  # —Ç—ã –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å update_event –≤ DataBase

        bot.send_message(chat_id, "‚úÖ –î–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        bot.delete_state(user_id, chat_id)

    @bot.message_handler(state=BotState.AWAIT_EVENT_TIME)
    def receive_event_time(message):
        from datetime import datetime
        user_id = message.from_user.id
        chat_id = message.chat.id

        try:
            start_str, end_str = message.text.strip().split()
            start = datetime.strptime(start_str, "%d.%m.%Y")
            end = datetime.strptime(end_str, "%d.%m.%Y")
        except:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        with bot.retrieve_data(user_id, chat_id) as data:
            event_id = data["event_id"]

        res = db.get_event(event_id)
        if res.status != Status.OK:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
            return

        event = Event.from_dict(res.value)
        event.start = start
        event.end = end

        db.update_event(event)  # —Ç—ã –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å update_event –≤ DataBase

        bot.send_message(chat_id, "‚úÖ –î–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        bot.delete_state(user_id, chat_id)

    @bot.callback_query_handler(func=lambda call: call.data == "event_edit_back")
    def handle_back_to_event(call):
        user_id = call.from_user.id
        events = db.get_admin_events(user_id)
        with bot.retrieve_data(user_id, call.message.chat.id) as data:
            index = data.get("admin_event_index", 0)

        show_event_card(call.message.chat.id, user_id, events, message_id=call.message.message_id)
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data == "event_create")
    def handle_event_create(call):
        user_id = call.from_user.id
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
        bot.set_state(user_id, BotState.AWAIT_NAME, call.message.chat.id)
