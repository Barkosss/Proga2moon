import uuid
from datetime import datetime
from services.questionDB import QuestionDB

from pyexpat.errors import messages
from telebot.types import Message

from enums.BotState import BotState
from enums.StatusEnum import Status
from models.Question import Question
from utils.decorators import admin_only, admin_only_event_callback
from services.database import DataBase
db = DataBase()
from telebot import types
from models.Event import Event

def register_handlers(bot):
    @bot.message_handler(func=lambda msg: msg.text == "–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    def show_admin_events(message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è" –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.

        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞,
        –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ª–∏—Å—Ç–∞–Ω–∏—è.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            message (telebot.types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª!")

        user_id = message.from_user.id
        events = db.get_admin_events(user_id)  # ‚Üê –≤–æ—Ç —Ç—É—Ç –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è

        if not events:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
            return

        with bot.retrieve_data(user_id, message.chat_id) as data:
            data["admin_event_index"] = 0

        show_event_card(message.chat.id, user_id, events)

    def show_event_card(chat_id, user_id, events: list[Event], message_id=None):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω `message_id`, —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è. –ò–Ω–∞—á–µ ‚Äî —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤–æ–µ.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            chat_id (int): ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            events (list[Event]): –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
            message_id (Optional[int]): ID —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        """
        print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª!")
        with bot.retrieve_data(user_id, chat_id) as data:
            index = data.get('admin_event_index', 0)
            event = events[index]

        text = (
            f"<b>{event.title}</b>\n"
            f"–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤: {len(event.workshop_ids)}\n"
            f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(event.registered_user_ids)}\n"
            f"–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {event.start.date()} ‚Äî {event.end.date()}"
        )

        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="event_prev"),
            types.InlineKeyboardButton("‚û°Ô∏è", callback_data="event_next")
        )
        markup.add(types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="event_edit"))
        markup.add(types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ", callback_data="event_create"))

        if message_id:
            bot.edit_message_text(text, chat_id, message_id, reply_markup=markup, parse_mode="HTML")
        else:
            bot.send_message(chat_id, text, reply_markup=markup, parse_mode="HTML")


        @bot.callback_query_handler(func=lambda call: call.data in ["event_prev", "event_next"])
        def paginate_events(call):
            """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ª–∏—Å—Ç–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (‚¨ÖÔ∏è, ‚û°Ô∏è).

            –ò–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É.

            –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
                call (telebot.types.CallbackQuery): –æ–±—ä–µ–∫—Ç –∫–æ–ª–±—ç–∫–∞ –æ—Ç Telegram
            """
            user_id = call.from_user.id
            chat_id = call.message.chat.id

            events = db.get_admin_events(user_id)
            total = len(events)

            if total == 0:
                bot.answer_callback_query(call.id, "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
                return

            # –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
            with bot.retrieve_data(user_id, chat_id) as data:
                current = data.get("admin_event_index", 0)

                if call.data == "event_prev":
                    current = (current - 1) % total
                else:
                    current = (current + 1) % total

                data["admin_event_index"] = current

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            show_event_card(
                chat_id=chat_id,
                user_id=user_id,
                events=events,
                message_id=call.message.message_id
            )

            bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("event_edit:"))
    @admin_only_event_callback
    def handle_event_edit(call, event_id):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
        """
        bot.answer_callback_query(call.id)

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üïí –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data=f"event_edit_time:{event_id}"))
        markup.add(types.InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç", callback_data=f"event_edit_chat:{event_id}"))
        markup.add(types.InlineKeyboardButton("üß© –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã", callback_data=f"event_edit_workshops:{event_id}"))
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="event_edit_back"))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üîß –í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ #{event_id}",
            reply_markup=markup
        )

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="event_edit_back"))

    @bot.callback_query_handler(func=lambda call: call.data.startswith("event_edit_time:"))
    @admin_only_event_callback
    def handle_edit_time(call, event_id):
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`–¥–¥.–º–º.–≥–≥–≥–≥ –¥–¥.–º–º.–≥–≥–≥–≥`",
                         parse_mode="Markdown")
        bot.set_state(call.from_user.id, BotState.AWAIT_EVENT_TIME, call.message.chat.id)

        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data["event_id"] = event_id

    @bot.message_handler(state=BotState.AWAIT_EVENT_TIME)
    def receive_event_time(message):
        from datetime import datetime
        user_id = message.from_user.id
        chat_id = message.chat.id

        try:
            start_str, end_str = message.text.strip().split()
            start = datetime.strptime(start_str, "%d.%m.%Y")
            end = datetime.strptime(end_str, "%d.%m.%Y")
        except:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        with bot.retrieve_data(user_id, chat_id) as data:
            event_id = data["event_id"]

        res = db.get_event(event_id)
        if res.status != Status.OK:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
            return

        event = Event.from_dict(res.value)
        event.start = start
        event.end = end

        db.update_event(event)  # —Ç—ã –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å update_event –≤ DataBase

        bot.send_message(chat_id, "‚úÖ –î–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        bot.delete_state(user_id, chat_id)

    @bot.message_handler(state=BotState.AWAIT_EVENT_TIME)
    def receive_event_time(message):
        from datetime import datetime
        user_id = message.from_user.id
        chat_id = message.chat.id

        try:
            start_str, end_str = message.text.strip().split()
            start = datetime.strptime(start_str, "%d.%m.%Y")
            end = datetime.strptime(end_str, "%d.%m.%Y")
        except:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        with bot.retrieve_data(user_id, chat_id) as data:
            event_id = data["event_id"]

        res = db.get_event(event_id)
        if res.status != Status.OK:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
            return

        event = Event.from_dict(res.value)
        event.start = start
        event.end = end

        db.update_event(event)  # —Ç—ã –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å update_event –≤ DataBase

        bot.send_message(chat_id, "‚úÖ –î–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        bot.delete_state(user_id, chat_id)

    @bot.callback_query_handler(func=lambda call: call.data == "event_create")
    def handle_event_create(call):
        user_id = call.from_user.id
        bot.set_state(user_id, BotState.AWAIT_EVENT_TITLE, call.message.chat.id)
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")

        with bot.retrieve_data(user_id, call.message.chat.id) as data:
            data["event_data"] = {}

    @bot.message_handler(state=BotState.AWAIT_EVENT_TITLE)
    def receive_event_title(message):
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data["event_data"]["title"] = message.text

        bot.set_state(message.from_user.id, BotState.AWAIT_EVENT_DESC, message.chat.id)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")

    @bot.message_handler(state=BotState.AWAIT_EVENT_DESC)
    def receive_event_desc(message):
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data["event_data"]["description"] = message.text

        bot.set_state(message.from_user.id, BotState.AWAIT_EVENT_START, message.chat.id)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")

    @bot.message_handler(state=BotState.AWAIT_EVENT_START)
    def receive_start_date(message):
        try:
            start = datetime.strptime(message.text, "%d.%m.%Y")
        except:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
            return

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data["event_data"]["start"] = start.isoformat()

        bot.set_state(message.from_user.id, BotState.AWAIT_EVENT_END, message.chat.id)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")

    @bot.message_handler(state=BotState.AWAIT_EVENT_END)
    def receive_end_date(message):
        try:
            end = datetime.strptime(message.text, "%d.%m.%Y")
        except:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
            return

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data["event_data"]["end"] = end.isoformat()

        bot.set_state(message.from_user.id, BotState.AWAIT_EVENT_LOCATION, message.chat.id)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:")

    @bot.message_handler(state=BotState.AWAIT_EVENT_LOCATION)
    def receive_location(message):
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data["event_data"]["location"] = message.text

        bot.set_state(message.from_user.id, BotState.AWAIT_EVENT_CHAT, message.chat.id)
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç (–∏–ª–∏ - –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):")

    @bot.message_handler(state=BotState.AWAIT_EVENT_CHAT)
    def receive_chat(message):
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data["event_data"]["chat_link"] = message.text if message.text != "-" else ""

            # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å Event-–æ–±—ä–µ–∫—Ç
            event_id = generate_event_id()  # —Ä–µ–∞–ª–∏–∑—É–π –∫–∞–∫ —Ö–æ—á–µ—à—å (UUID –∏–ª–∏ —Å—á—ë—Ç—á–∏–∫)
            event = Event(
                id=event_id,
                start=datetime.fromisoformat(data["event_data"]["start"]),
                end=datetime.fromisoformat(data["event_data"]["end"]),
                workshop_ids=[],
                admin_ids=[message.from_user.id],
                chat_link=data["event_data"]["chat_link"]
            )
            db.add_event(event, [])  # –±–µ–∑ –≤–æ—Ä–∫—à–æ–ø–æ–≤ –ø–æ–∫–∞

        bot.send_message(message.chat.id, "‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")
        bot.delete_state(message.from_user.id, message.chat.id)

    def generate_event_id() -> str:
        return str(uuid.uuid4())

    @bot.message_handler(func=lambda msg: msg.text == "–í–æ–ø—Ä–æ—Å—ã –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    def handle_question_list(message):
        user_id = message.from_user.id
        res = db.get_user(user_id)

        if res.status != Status.OK or not res.value.admin_event_ids:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–æ–ø—Ä–æ—Å–∞–º.")
            return

        event_id = res.value.admin_event_ids[0]  # –ø–æ–∫–∞ –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π (–∏–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π)
        questions = db.get_questions(event_id)

        if not questions:
            bot.send_message(message.chat.id, "–ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
            return

        with bot.retrieve_data(user_id, message.chat.id) as data:
            data["question_index"] = 0
            data["questions"] = [q.to_dict() for q in questions]
            data["event_id"] = event_id

        show_question(message.chat.id, user_id, questions, index=0)

    def show_question(chat_id, user_id, questions, index):
        q = questions[index]
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin_answer:{q['id']}"),
            types.InlineKeyboardButton("–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data="admin_next_question")
        )

        text = (
            f"<b>–í–æ–ø—Ä–æ—Å {index + 1} –∏–∑ {len(questions)}</b>\n\n"
            f"üìç –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: –ü–ò–ö-–ê–ô–¢–ò\n"
            f"‚ùì <i>{q['text']}</i>"
        )

        bot.send_message(chat_id, text, reply_markup=markup, parse_mode="HTML")

    @bot.callback_query_handler(func=lambda call: call.data == "admin_next_question")
    def handle_next_question(call):
        user_id = call.from_user.id
        with bot.retrieve_data(user_id, call.message.chat.id) as data:
            index = data.get("question_index", 0)
            questions = data.get("questions", [])

            if index + 1 >= len(questions):
                bot.answer_callback_query(call.id, "–ë–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç.")
                return

            index += 1
            data["question_index"] = index

        bot.answer_callback_query(call.id)
        show_question(call.message.chat.id, user_id, questions, index)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("admin_answer:"))
    def ask_for_answer(call):
        question_id = call.data.split(":")[1]

        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data["answering_question_id"] = question_id

        bot.set_state(call.from_user.id, BotState.AWAIT_ADMIN_ANSWER, call.message.chat.id)
        bot.send_message(call.message.chat.id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:")

    @bot.message_handler(state=BotState.AWAIT_ADMIN_ANSWER)
    def receive_answer_text(message):
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data["answer_text"] = message.text

        bot.set_state(message.from_user.id, BotState.AWAIT_ADMIN_CONFIRMATION, message.chat.id)

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="admin_send_answer"))
        markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="admin_edit_answer"))

        bot.send_message(message.chat.id, f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏:\n\n<i>{message.text}</i>", parse_mode="HTML",
                         reply_markup=markup)

    @bot.message_handler(state=BotState.AWAIT_ADMIN_ANSWER)
    def receive_answer_text(message):
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data["answer_text"] = message.text

        bot.set_state(message.from_user.id, BotState.AWAIT_ADMIN_CONFIRMATION, message.chat.id)

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="admin_send_answer"))
        markup.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="admin_edit_answer"))

        bot.send_message(message.chat.id, f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏:\n\n<i>{message.text}</i>", parse_mode="HTML",
                         reply_markup=markup)

    @bot.message_handler(func=lambda msg: msg.text == "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    def show_faq(message):
        faq_text = (
            "üìå <b>FAQ</b>\n\n"
            "‚Ä¢ –ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å?\n"
            "–û—Ç–≤–µ—Ç: –ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è' –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –≤–æ—Ä–∫—à–æ–ø–∞.\n\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?\n"
            "–û—Ç–≤–µ—Ç: –î–∞, —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'.\n\n"
            "‚Ä¢ –ì–¥–µ –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?\n"
            "–û—Ç–≤–µ—Ç: –í —Ä–∞–∑–¥–µ–ª–µ '–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'."
        )
        bot.send_message(message.chat.id, faq_text, parse_mode="HTML")

    from uuid import uuid4
    from datetime import datetime

    @bot.message_handler(func=lambda msg: msg.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º")
    def ask_question_text(message):
        bot.set_state(message.from_user.id, BotState.AWAIT_NAME, message.chat.id)
        bot.send_message(message.chat.id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É:")

    @bot.message_handler(state=BotState.AWAIT_NAME)
    def receive_question(message):
        user_id = message.from_user.id
        user = db.get_user(user_id).value
        event_id = user.registered_event_ids[0] if user.registered_event_ids else None

        if not event_id:
            bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
            return

        question = Question(
            id=str(uuid4()),
            event_id=event_id,
            user_id=user_id,
            text=message.text,
            created_at=datetime.now()
        )

        db_questions.add_question(question)
        bot.send_message(message.chat.id, "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º. –°–ø–∞—Å–∏–±–æ!")
        bot.delete_state(user_id, message.chat.id)
